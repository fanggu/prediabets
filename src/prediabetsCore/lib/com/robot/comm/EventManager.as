package com.robot.comm {	import com.robot.VO.EventVO;	import flash.utils.Dictionary;	/**	 * @author roboot	 */	public class EventManager 	{		private static var _instance:EventManager ; 				private var _arr_events:Array ; 		private var _dict_ID_TO_VO:Dictionary ; 		function EventManager(){}				public function addEvent( eVO:EventVO ):void		{			 			eventAddListener(eVO) ; 			_arr_events.push( eVO ) ;  			_dict_ID_TO_VO[eVO.id] = eVO ; 		}		public function pauseEvent( id:String ) :void		{			var eVO:EventVO = _dict_ID_TO_VO[id] ;  			eventRemoveListener(eVO) ; 			}		public function unPauseEvent( id:String ) :void		{			var eVO:EventVO = _dict_ID_TO_VO[id] ;  			eventAddListener(eVO) ;  			}		public function removeEvent( id:String ) :void		{			var eVO:EventVO = _dict_ID_TO_VO[id] ;  			eventRemoveListener(eVO) ; 			var nr_in_array:int = _arr_events.indexOf( eVO ) ; 			_arr_events.splice( nr_in_array , 1 ) ; 		} 		public function pauseEvents( ):void		{ 			for (var i : int = 0; i < _arr_events.length; i++) 			{				var eVO:EventVO = _arr_events[i] ;  				eventRemoveListener(eVO) ; 			}		}		public function unPauseEvents( ):void		{			for (var i : int = 0; i < _arr_events.length; i++) 			{				var eVO:EventVO = _arr_events[i] ;  				eventAddListener(eVO) ;   				} 		}		public function removeAllEvents( ):void		{			for (var i : int = 0; i < _arr_events.length; i++) 			{				var eVO:EventVO = _arr_events[i] ;  				eventRemoveListener(eVO) ; 			} 			_arr_events = new Array() ; 		}						///*****************		//PRIVATE		//******************		private function eventAddListener(eVO:EventVO):void		{			eVO.listener['addEventListener']( eVO.eventOver , eVO.callOver ) ; 			eVO.listener['addEventListener']( eVO.eventOut , eVO.callOut ) ; 			eVO.listener['addEventListener']( eVO.eventPress , eVO.callPress ) ;		}		private function eventRemoveListener(eVO:EventVO):void		{			eVO.listener['removeEventListener']( eVO.eventOver , eVO.callOver ) ; 			eVO.listener['removeEventListener']( eVO.eventOut , eVO.callOut ) ; 			eVO.listener['removeEventListener']( eVO.eventPress , eVO.callPress ) ;		}		//**GET INSTANCE		public static function getInstance ( ) : EventManager		{			if ( EventManager._instance == null )			{				 EventManager._instance = new EventManager ( ) ;				 EventManager._instance._arr_events = new Array() ; 				 EventManager._instance._dict_ID_TO_VO = new Dictionary() ; 			}			return EventManager._instance ;		}	}}